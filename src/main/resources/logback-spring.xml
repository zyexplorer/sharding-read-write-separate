<?xml version="1.0" encoding="UTF-8"?>
<configuration>

<!--    <property resource="bootstrap.yml" />-->
<!--    <springProperty scope="context" name="appName" source="spring.application.name" />-->
<!--    <springProperty scope="context" name="env" source="spring.profiles.active" />-->

    <conversionRule conversionWord="ip" converterClass="com.zy.shardingreadwriteseparate.config.LogIpConfig" />
    <property name="appName" value="sharding-read-write-separate"/>
    <!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <property name="LOG_HOME" value="/data/logs/${appName}" />
    <!-- 日志输出格式 -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %M 输出执行日志请求的方法名  %c包路径  %F 输出执行记录请求的java源文件名  %L输出执行日志请求的行号  %msg：日志消息，%n是换行符-->
    <property name="LOG_PATTERN" value="[${appName}][%ip][%d{yyyy-MM-dd HH:mm:ss}][%-5level][%thread][%M][%c.%F,%L]==>%msg%n" />
    <property name="LOG_PATTERN_ERROR" value="[${appName}][%ip][%d{yyyy-MM-dd HH:mm:ss}][%-5level][%thread][%logger{80}.%M][%F.%L]-->%msg%n" />

    <!--定义日志存放的位置-->
    <springProperty scope="context" name="logPath" source="log.path" defaultValue="logs"/>

    <!-- ****************************************************************************************** -->
    <!-- ****************************** 本地环境只在控制台打印日志 ************************************ -->
    <!-- ****************************************************************************************** -->
    <springProfile name="local">
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <!--encoder 默认配置为PatternLayoutEncoder-->
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger Line:%-3L - %msg%n</pattern>
                <!--<pattern>${LOG_PATTERN}</pattern>-->
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <root level="info">
            <appender-ref ref="STDOUT"/>
        </root>

        <logger name="com.zy" level="debug" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>

        <!--打印mongo执行语句-->
        <logger name="org.springframework.data.mongodb.core" level="DEBUG"/>
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="trace" />

    </springProfile>

    <!-- ****************************************************************************************** -->
    <!-- ********************** 非本地环境日志记录在文件 **************************** -->
    <!-- ****************************************************************************************** -->
    <springProfile name="!local">
        <!-- 日志记录器，日期滚动记录 -->
        <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 正在记录的日志文件的路径及文件名 -->
            <file>${logPath}/log_error.log</file>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- 归档的日志文件的路径，例如今天是2018-11-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
                <fileNamePattern>${logPath}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!-- 除按日志记录之外，还配置了日志文件不能超过500MB，若超过500MB，日志文件会以索引0开始，
                命名日志文件，例如log-error-2018-11-21.0.log -->
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>200MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!--保存的时间（天数）-->
                <maxHistory>7</maxHistory>
            </rollingPolicy>
            <!-- 追加方式记录日志 -->
            <append>true</append>
            <!-- 日志文件的格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger Line:%-3L - %msg%n</pattern>-->
                <pattern>${LOG_PATTERN_ERROR}</pattern>
                <charset>utf-8</charset>
            </encoder>
            <!-- 此日志文件只记录error级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>error</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 日志记录器，日期滚动记录 -->
        <appender name="FILE_ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 正在记录的日志文件的路径及文件名 -->
            <file>${logPath}/log_total.log</file>
            <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
                而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
                <fileNamePattern>${logPath}/total/log-total-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!-- 除按日志记录之外，还配置了日志文件不能超过500MB，若超过500MB，日志文件会以索引0开始，
                命名日志文件，例如log-error-2013-12-21.0.log -->
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>500MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <!-- 追加方式记录日志 -->
            <append>true</append>
            <!-- 日志文件的格式 -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger Line:%-3L - %msg%n</pattern>-->
                <pattern>${LOG_PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <root level="info">
            <appender-ref ref="FILE_ERROR"/>
            <appender-ref ref="FILE_ALL"/>
        </root>
        <!--打印mongo执行语句-->
        <logger name="org.springframework.data.mongodb.core" level="DEBUG"/>
    </springProfile>

</configuration>


